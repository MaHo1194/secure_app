<resources>
    <string name="app_name">SecureApp</string>
    <string name="tab_text_1">Tab 1</string>
    <string name="tab_text_2">Tab 2</string>

    <string name="home_text">
            Herzlich Willkommen! \n\n

            Diese Applikation enthält technische Lösungen zu beliebten Sicherheitslücken in Android-Applikationen, basierend der OWASP Mobile Top 10 Risks.\n\n

            Jede Schwachstelle enthält eine Kurzbeschreibung sowie eine Anleitung zum Testen in dieser Applikation. \n\n

            Mit einem Klick auf den Start-Button öffnet sich ein Hauptmenü, aus der die einzelne Schwachstelle heraus geöffnet werden kann. \n\n

            Viel Spaß! ;)
    </string>


    <string name="beschreibung_insecure_data_storage">
        Die Kategorie Insecure Data Storage bzw. Unsichere Datenspeicherung deckt Schwachstellen ab, die sich auf die Speicherung von Daten beziehen.
        \n\n
        Werden Daten nicht sicher gespeichert und sind für unbefugte im Klartext lesbar, kann dies verheerende Folgen haben: Identitätsdiebstahl, Betrug oder auch der Vertrauensverlust den Anwendern
        gegenüber, speichert die eigene Applikation Daten nicht sicher und gelangt dies an die Öffentlichkeit.
        \n \n
        Ein mögliches Angriffsszenario ist der Dateisystemzugriff: In den SharedPreferences werden unverschlüsselte Daten im Dateisystem gespeichert.
        Standardmäßig sind diese Daten durch die Linux-Dateiberechtigungen geschützt. Sobald das Gerät aber gerootet ist, sind diese Daten leicht zugänglich.
        \n
        Weiterhin greift das Android-Betriebssystem auf das SQLite-Datenbanksystem zurück. Standardmäßig sind diese Datenbanken unverschlüsselt und können eingesehen werden.

    </string>

    <string name="vermeidung_insecure_data_storage">
        Schwachstellen der Kategorie Unsichere Datenspeicherung lassen sich vermeiden, indem sämtliche Daten der Applikation verschlüsselt werden.
        \n \n
        Um die SQLite-Datenbank zu verschlüsseln, kann das Tool SQLCipher von Zetetic genutzt werden.
         \n \n
        Einträge in den SharedPreferences lassen sich mit Hilfe der Libary EncryptedSharedPreferences verschlüsseln.
    </string>

    <string name="beschrebung_insecure_communiation">
        Diese Kategorie handelt von unzureichender bis zu fehlender verschlüsselten Kommunikation in den Bereichen TCP/IP, WLAN, Bluetooth, NFC, 3G, SMS etc.
        Insbesondere zählen hierzu falsche oder veraltete SSL/TLS-Versionen und mangelnde Verschlüsselung der zu übertragenden Daten.
        Besteht keine sichere Kommunikation bedeutet dies den kompletten Verlust der Ingetrität und der Vertraulichkeit sämtlicher, übertragener Daten.
    </string>

    <string name="vermeidung_insecure_communication">
        Um die Kommunikation vor Man-in-the-Midle-Attacken abzusichern, sollten Zertifikate eingesetzt werden - möglichst mit langen Schlüsseln, ab 2048 Bit.
        \n \n
        Außerdem sollten sichere Protokolle, wie beispielsweise TLSv3 und SHA2-Cipher-Suites verwendet werden.
    </string>

    <string name="test_insecure_data_storage">
        Die sichere Datenspeicherung kann für die Speichermethoden SharedPreferences und SQLite getestet werden. Klicken Sie dazu einfach auf den gewünschten Button und folgen den dortigen Anweisungen.
    </string>

    <string name="shared_prefs_text">
        Um die Sicherheit der SharedPreferences zu testen, bitte im ersten Fenster einen beliebigen String eingeben. Anschließend wird dieser zur Kontrolle im unteren Fenster ausgegeben.
        \n \n
        Die SharedPreferences lassen sich nun im Ordner /data/shared_prefs/encrypted_shared_prefs.xml finden. Der übergebene String wurde mit dem AES256-Algorithmus verschlüsselt.
    </string>

    <string name="sqlite_test">
        Hier wird eine, mit dem AES256-Algorithmus, verschlüsselte SQLite-Datenbank, lokal auf dem Endgerät/Emulator erstellt. Dazu wird die Erweiterung SQL-Cipher genutzt. Diese Datenbank speichert ausschließlich E-Mail-Adressen.
        \n \n
        Die Datenbank muss mit einem Passwort versehen werden. Nachdem das Passwort erfolgreich übergeben wurde, wird eine verschlüsselte SQLite-Datenbank erzeugt. Anschließend können einzelne Datensätze in dieser Applikation hinzugefügt, bearbeitet oder gelöscht werden.
        \n \n
        Der Speicherort der Datenbank ist /data/database/encrypted_database.db. Öffnen lässt sie sich mit Hilfe des DBBrowser-Tools for SQLCipher. Zum Öffnen wird das Passwort benötigt, welches vorher übergeben wurde.
        \n \n
        Darüber hinaus lässt sich die Datenbank mit einem Editor (z.B. Notepad++) öffnen, sämtlicher Inhalt ist aber verschlüsselt und nicht lesbar!
        \n \n
        Das Passwort muss aus mindestens 8 Zeichen bestehen, darunter mindestens eine Ziffer, einen Klein- sowie Großbuchstaben und ein Sonderzeichen.
    </string>

    <string name="client_side_injection_beschreibung">
        Schwachstellen der Kategorie Client Side Injection beschreiben Sicherheitslücken, die Angriffe, wie SQL-Injections oder Cross-Site-Scripting-Angriffe
        ermöglichen. \n \n
        Diese Sicherheitslücke tritt auf, sobald es dem Angreifer gelingt, durch fehlende Eingabevalidierung, Schadcode in Eingabefenster einschleust.
        Dadurch kann Fehlverhalten ausgelöst werden, welches dem Angreifer ermöglicht, an sensible Daten zu gelangen.
    </string>

    <string name="client_side_injection_vermeidung">
        Um SQL-Injections zu vermeiden, sollten beim Zugriff auf die Datenbank parametrisierte Abfragen verwendet werden.
    </string>

    <string name="login_dialog">
        Hier kann die Authentifizierung mit Hilfe von JSON Web Tokens getestet werden. Das Backend stellt einen privaten API-Endpunkt bereit, welcher ein kurzes Hello World zurückgibt.
        \n\n
        Hierzu ist eine freiwillige Registrierung über den Auth0-Provider erforderlich. Nachdem diese erfolgreich abgeschlossen wurde, kann auf den privaten API-Endpunkt zugegriffen werden.
    </string>

    <string name="danksagungen">
        Besonderer Dank geht an Dr. Mario Kubek, welcher mir dieses Thema für meine Bachelorarbeit vorgeschlagen und hilfreiche Ratschläge im Bereich Mobile Security gegeben hat.
        \n \n
        Weiterhin bedanke ich mich bei Prof. Dr. Christian Gawron für die Hilfestellungen im Bereich des Hostings und Veröffentlichung dieser Applikation.
    </string>

    <string name="link_fh_homepage">
       <a href="https://www.fh-swf.de">Homepage der Fachhochschule Südwestfalen</a>
    </string>

    <string name="link_gawron">
       <a href="https://www4.fh-swf.de/de/home/ueber_uns/standorte/is/fb_in/doz_in/profs_in/gawron/index.php">FH-Homepage von Prof. Dr. Christian Gawron</a>
    </string>

    <string name="link_kubek">
       <a href="https://www.fernuni-hagen.de/mi/fakultaet/lehrende/kubek/index.shtml#">FernUni-Homepage von Dr. Mario Kubek</a>
    </string>

    <string name="link_owasp">
       <a href="https://owasp.org/">Homepage des OWASP</a>
    </string>

    <string name="link_android_security">
        <a href="https://developer.android.com/security">Sicherheitstipps der Android-Plattform</a>
    </string>

    <string name="link_auth0">
        <a href="https://auth0.com/de/">Auth0.com</a>
    </string>

    <string name="xss_sqli_text">
        Im folgenden können SQL-Injections getestet werden.
        \n
        Dazu einfach auf den Button klicken und den dortigen Anweisungen folgen.
    </string>

    <string name="insecure_communication_test_string">
        Hier kann die verschlüsselte Kommunikation zum Backend getestet werden.
        \n \n
        Das Backend stellt einen öffentlichen API-Endpunkt bereit, der die aktuelle Serveruhrzeit zurückgibt.
        \n \n
        Zum Testen der Verschlüsselung kann auf Wireshark zurückgegriffen werden. Um den Traffic zum Backend herauszufiltern, muss folgender Filter verwendet werden: \n  ip.addr == 193.174.71.211. \n Dieser zeigt lediglich den Datenverkehr zwischen Emulator und Backend an.
    </string>


    <string name="com_auth0_client_id">0kWtHmLURySF83cUfki2iZPjh8L4Inun</string>
    <string name="com_auth0_domain">dev-dqjyvzmz.eu.auth0.com</string>

    <string name="how_to_start">
        Zur Benutzung dieser Applikation wird empfohlen, einen Android-Emulator, wie z.B. Genymotion zu verwenden.
        \n\n
        Weiterhin sollte auf dem Emulator die Android Debug Bridge (ADB) installiert sein, dadurch ist der Zugriff auf die lokal gespeicherten Daten der Applikation möglich.
        \n\n
        Selbstverständlich kann diese Applikation auch auf einem normalen Smartphone, Tablet installiert werden.
        \n\n Weitere Informationen gibt es <a href="https://github.com/MaHo1194/secure_app#anleitung-zum-testen-der-einzelnen-schwachstellen">hier.</a>
    </string>

    <string name="sqlinjection_text">
        Im folgenden können SQL-Injections getestet werden. Die Datenbank enthält zwei Datensätze und wurde unverschlüsselt implementiert, um trotz der Maßnahmen gegen SQL-Injections einen Einblick in die Datenbank zu bekommen.
        \n\n
        Zum Testen der Maßnahmen gegen SQL-Injections können Sie in das Suchfeld beispielsweise folgende Payloads eingeben:
        \n\n
        admin\' or \'1\'=\'1
        \n
        a\'or\'1\'=\'1
    </string>

    <string name="datenschutz_text">
        Diese Applikation erhebt und verarbeitet keine personenbezogenen Daten. In den Logdateien des Servers wird Ihre IP-Adresse nur in anonymisierter Form (ohne das letzte Byte) gespeichert.
        \n \n
        Bei Benutzung des Auth0-Dienstes, werden Ihre IP- sowie E-Mail-Adresse gespeichert.
        \n \n
        Haben Sie sich einen Account über Auth0 erstellt, welcher gelöscht werden soll, kontaktieren Sie mich per E-Mail. Im Anschluss werde ich eine Löschung vornehmen.
    </string>

    <string name="enter_sql_cipher_text">
        Hier das Passwort für die Datenbank eingeben.
    </string>
</resources>